from heapq import heappush, heappop

n,m = map(int,input().split())

answer =[] 
graph = [[] for _ in range(n+1)]


def dijkstra(start):
    global graph
    
    distance = [10e10] * (n+1)
    q = []
    heappush(q,(0,start))
    distance[start] = 0
    
    while q:
        cost, now = heappop(q)
        
        if distance[now] < cost:
            continue
        
        for ad in graph[now]:
            c = cost + ad[1]
            if c < distance[ad[0]]:
                distance[ad[0]] = c
                heappush(q,(c,ad[0]))


    return distance


isDone = set()
for _ in range(m):
    a,b = map(int,input().split())
    
    if (a,b) not in isDone:
        graph[a].append((b,1))
        graph[b].append((a,1))
        isDone.add((a,b))
        isDone.add((b,a))
    else:
        pass
    

for i in range(1,n+1):
    temp = dijkstra(i)
    temp = temp[1:]
    answer.append((sum(temp),i))
    
answer.sort(key=lambda x: (x[0],x[1]))

print(answer[0][1])